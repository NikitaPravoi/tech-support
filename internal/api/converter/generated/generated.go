// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !goverter

package generated

import (
	converter "tech-support/internal/api/converter"
	output "tech-support/internal/api/handlers/output"
	database "tech-support/internal/database"
)

func ConvertProjectToProjectOutput(source database.Project) output.ProjectOutput {
	var outputProjectOutput output.ProjectOutput
	outputProjectOutput.Body = databaseProjectToOutputProject(source)
	return outputProjectOutput
}
func ConvertRoleToRoleOutput(source database.Role) output.RoleOutput {
	var outputRoleOutput output.RoleOutput
	outputRoleOutput.Body = databaseRoleToOutputRole(source)
	return outputRoleOutput
}
func ConvertSessionToLoginOutput(source database.Session) output.LoginOutput {
	var outputLoginOutput output.LoginOutput
	outputLoginOutput.Body = databaseSessionToOutputSession(source)
	return outputLoginOutput
}
func ConvertSupportTicketToSupportTicketOutput(source database.SupportTicket) output.SupportTicketOutput {
	var outputSupportTicketOutput output.SupportTicketOutput
	outputSupportTicketOutput.Body = databaseSupportTicketToOutputSupportTicket(source)
	return outputSupportTicketOutput
}
func ConvertUserProjectToUserProjectOutput(source database.UserProject) output.UserProjectOutput {
	var outputUserProjectOutput output.UserProjectOutput
	outputUserProjectOutput.Body = databaseUserProjectToOutputUserProject(source)
	return outputUserProjectOutput
}
func databaseProjectToOutputProject(source database.Project) output.Project {
	var outputProject output.Project
	outputProject.ID = source.ID
	outputProject.Name = source.Name
	if source.Description != nil {
		xstring := *source.Description
		outputProject.Description = &xstring
	}
	return outputProject
}
func databaseRoleToOutputRole(source database.Role) output.Role {
	var outputRole output.Role
	outputRole.ID = source.ID
	outputRole.Name = source.Name
	outputRole.Description = source.Description
	return outputRole
}
func databaseSessionToOutputSession(source database.Session) output.Session {
	var outputSession output.Session
	outputSession.ID = source.ID
	outputSession.UserID = source.UserID
	outputSession.Token = source.Token
	outputSession.CreatedAt = converter.TimestamptzToTime(source.CreatedAt)
	outputSession.ExpiresAt = converter.TimestamptzToTime(source.ExpiresAt)
	return outputSession
}
func databaseSupportTicketToOutputSupportTicket(source database.SupportTicket) output.SupportTicket {
	var outputSupportTicket output.SupportTicket
	outputSupportTicket.ID = source.ID
	outputSupportTicket.ProjectID = source.ProjectID
	outputSupportTicket.StatusID = source.StatusID
	outputSupportTicket.Title = source.Title
	if source.Description != nil {
		xstring := *source.Description
		outputSupportTicket.Description = &xstring
	}
	outputSupportTicket.CreatedAt = converter.TimestamptzToTime(source.CreatedAt)
	outputSupportTicket.UpdatedAt = converter.TimestamptzToTime(source.UpdatedAt)
	outputSupportTicket.CreatedBy = source.CreatedBy
	if source.Answer != nil {
		xstring2 := *source.Answer
		outputSupportTicket.Answer = &xstring2
	}
	if source.AnsweredBy != nil {
		xint64 := *source.AnsweredBy
		outputSupportTicket.AnsweredBy = &xint64
	}
	return outputSupportTicket
}
func databaseUserProjectToOutputUserProject(source database.UserProject) output.UserProject {
	var outputUserProject output.UserProject
	outputUserProject.ID = source.ID
	outputUserProject.UserID = source.UserID
	outputUserProject.ProjectID = source.ProjectID
	return outputUserProject
}
