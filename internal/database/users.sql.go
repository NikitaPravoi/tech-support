// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (login, email, password, role_id)
VALUES ($1, $2, $3, $4) RETURNING id, login, email, password, role_id
`

type CreateUserParams struct {
	Login    string `json:"login"`
	Email    string `json:"email"`
	Password string `json:"password"`
	RoleID   int64  `json:"role_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Login,
		arg.Email,
		arg.Password,
		arg.RoleID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Email,
		&i.Password,
		&i.RoleID,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getProjectUsers = `-- name: GetProjectUsers :many
SELECT
    users.id, users.login, email, r.name AS role
FROM users
         JOIN public.roles r on r.id = users.role_id
         JOIN public.user_projects up on users.id = up.user_id
WHERE project_id = $1
`

type GetProjectUsersRow struct {
	ID    int64  `json:"id"`
	Login string `json:"login"`
	Email string `json:"email"`
	Role  string `json:"role"`
}

func (q *Queries) GetProjectUsers(ctx context.Context, projectID int64) ([]GetProjectUsersRow, error) {
	rows, err := q.db.Query(ctx, getProjectUsers, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProjectUsersRow
	for rows.Next() {
		var i GetProjectUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Login,
			&i.Email,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT id, login, email, password, role_id FROM users WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Login,
		&i.Email,
		&i.Password,
		&i.RoleID,
	)
	return i, err
}

const getUserCredentials = `-- name: GetUserCredentials :one
SELECT id, login, password FROM users WHERE login = $1
`

type GetUserCredentialsRow struct {
	ID       int64  `json:"id"`
	Login    string `json:"login"`
	Password string `json:"password"`
}

func (q *Queries) GetUserCredentials(ctx context.Context, login string) (GetUserCredentialsRow, error) {
	row := q.db.QueryRow(ctx, getUserCredentials, login)
	var i GetUserCredentialsRow
	err := row.Scan(&i.ID, &i.Login, &i.Password)
	return i, err
}

const getUserWithHisRoles = `-- name: GetUserWithHisRoles :one
SELECT u.id, u.email, r.name AS role
FROM users u
    JOIN roles r ON u.role_id = r.id
WHERE u.id = $1
`

type GetUserWithHisRolesRow struct {
	ID    int64  `json:"id"`
	Email string `json:"email"`
	Role  string `json:"role"`
}

func (q *Queries) GetUserWithHisRoles(ctx context.Context, id int64) (GetUserWithHisRolesRow, error) {
	row := q.db.QueryRow(ctx, getUserWithHisRoles, id)
	var i GetUserWithHisRolesRow
	err := row.Scan(&i.ID, &i.Email, &i.Role)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, login, email, password, role_id FROM users
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Login,
			&i.Email,
			&i.Password,
			&i.RoleID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET login = $2, email = $3, password = $4
WHERE id = $1
`

type UpdateUserParams struct {
	ID       int64  `json:"id"`
	Login    string `json:"login"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.Login,
		arg.Email,
		arg.Password,
	)
	return err
}
