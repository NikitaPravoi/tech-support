// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: support_tickets.sql

package database

import (
	"context"
)

const createSupportTicket = `-- name: CreateSupportTicket :one
INSERT INTO support_tickets (project_id, title, description, created_by)
VALUES ($1, $2, $3, $4)
RETURNING id, project_id, status_id, title, description, created_at, updated_at, created_by, answer, answered_by
`

type CreateSupportTicketParams struct {
	ProjectID   int64   `json:"project_id"`
	Title       string  `json:"title"`
	Description *string `json:"description"`
	CreatedBy   string  `json:"created_by"`
}

func (q *Queries) CreateSupportTicket(ctx context.Context, arg CreateSupportTicketParams) (SupportTicket, error) {
	row := q.db.QueryRow(ctx, createSupportTicket,
		arg.ProjectID,
		arg.Title,
		arg.Description,
		arg.CreatedBy,
	)
	var i SupportTicket
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.StatusID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.Answer,
		&i.AnsweredBy,
	)
	return i, err
}

const deleteSupportTicket = `-- name: DeleteSupportTicket :exec
DELETE FROM support_tickets WHERE id = $1
`

func (q *Queries) DeleteSupportTicket(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteSupportTicket, id)
	return err
}

const getSupportTicket = `-- name: GetSupportTicket :one
SELECT id, project_id, status_id, title, description, created_at, updated_at, created_by, answer, answered_by FROM support_tickets WHERE id = $1
`

func (q *Queries) GetSupportTicket(ctx context.Context, id int64) (SupportTicket, error) {
	row := q.db.QueryRow(ctx, getSupportTicket, id)
	var i SupportTicket
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.StatusID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.Answer,
		&i.AnsweredBy,
	)
	return i, err
}

const listSupportTickets = `-- name: ListSupportTickets :many
SELECT id, project_id, status_id, title, description, created_at, updated_at, created_by, answer, answered_by FROM support_tickets
`

func (q *Queries) ListSupportTickets(ctx context.Context) ([]SupportTicket, error) {
	rows, err := q.db.Query(ctx, listSupportTickets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SupportTicket
	for rows.Next() {
		var i SupportTicket
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.StatusID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.Answer,
			&i.AnsweredBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSupportTicketsByProject = `-- name: ListSupportTicketsByProject :many
SELECT id, project_id, status_id, title, description, created_at, updated_at, created_by, answer, answered_by FROM support_tickets WHERE project_id = $1
`

func (q *Queries) ListSupportTicketsByProject(ctx context.Context, projectID int64) ([]SupportTicket, error) {
	rows, err := q.db.Query(ctx, listSupportTicketsByProject, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SupportTicket
	for rows.Next() {
		var i SupportTicket
		if err := rows.Scan(
			&i.ID,
			&i.ProjectID,
			&i.StatusID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.Answer,
			&i.AnsweredBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSupportTicket = `-- name: UpdateSupportTicket :one
UPDATE support_tickets
SET project_id = $2, status_id = $3, title = $4, description = $5, updated_at = now(), created_by = $6
WHERE id = $1
RETURNING id, project_id, status_id, title, description, created_at, updated_at, created_by, answer, answered_by
`

type UpdateSupportTicketParams struct {
	ID          int64   `json:"id"`
	ProjectID   int64   `json:"project_id"`
	StatusID    int64   `json:"status_id"`
	Title       string  `json:"title"`
	Description *string `json:"description"`
	CreatedBy   string  `json:"created_by"`
}

func (q *Queries) UpdateSupportTicket(ctx context.Context, arg UpdateSupportTicketParams) (SupportTicket, error) {
	row := q.db.QueryRow(ctx, updateSupportTicket,
		arg.ID,
		arg.ProjectID,
		arg.StatusID,
		arg.Title,
		arg.Description,
		arg.CreatedBy,
	)
	var i SupportTicket
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.StatusID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.Answer,
		&i.AnsweredBy,
	)
	return i, err
}

const writeAnswerSupportTicket = `-- name: WriteAnswerSupportTicket :one
UPDATE support_tickets
SET answer = $2, answered_by = $3
WHERE id = $1
RETURNING id, project_id, status_id, title, description, created_at, updated_at, created_by, answer, answered_by
`

type WriteAnswerSupportTicketParams struct {
	ID         int64   `json:"id"`
	Answer     *string `json:"answer"`
	AnsweredBy *int64  `json:"answered_by"`
}

func (q *Queries) WriteAnswerSupportTicket(ctx context.Context, arg WriteAnswerSupportTicketParams) (SupportTicket, error) {
	row := q.db.QueryRow(ctx, writeAnswerSupportTicket, arg.ID, arg.Answer, arg.AnsweredBy)
	var i SupportTicket
	err := row.Scan(
		&i.ID,
		&i.ProjectID,
		&i.StatusID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.Answer,
		&i.AnsweredBy,
	)
	return i, err
}
