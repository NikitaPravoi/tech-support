// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: session.sql

package database

import (
	"context"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (user_id, token)
VALUES ($1, $2) RETURNING id, user_id, token, created_at, expires_at
`

type CreateSessionParams struct {
	UserID int64  `json:"user_id"`
	Token  string `json:"token"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession, arg.UserID, arg.Token)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions
WHERE id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteSession, id)
	return err
}

const deleteSessionsByUserID = `-- name: DeleteSessionsByUserID :exec
DELETE FROM sessions
WHERE user_id = $1
`

func (q *Queries) DeleteSessionsByUserID(ctx context.Context, userID int64) error {
	_, err := q.db.Exec(ctx, deleteSessionsByUserID, userID)
	return err
}

const getSession = `-- name: GetSession :one
SELECT id, user_id, token, created_at, expires_at FROM sessions WHERE id = $1
`

func (q *Queries) GetSession(ctx context.Context, id int64) (Session, error) {
	row := q.db.QueryRow(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getSessionByToken = `-- name: GetSessionByToken :one
SELECT id, user_id, token, created_at, expires_at FROM sessions WHERE token = $1
`

func (q *Queries) GetSessionByToken(ctx context.Context, token string) (Session, error) {
	row := q.db.QueryRow(ctx, getSessionByToken, token)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const listSessions = `-- name: ListSessions :many
SELECT id, user_id, token, created_at, expires_at FROM sessions
`

func (q *Queries) ListSessions(ctx context.Context) ([]Session, error) {
	rows, err := q.db.Query(ctx, listSessions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Session
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Token,
			&i.CreatedAt,
			&i.ExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSessionExpiry = `-- name: UpdateSessionExpiry :exec
UPDATE sessions
SET expires_at = CURRENT_TIMESTAMP
WHERE token = $1
`

func (q *Queries) UpdateSessionExpiry(ctx context.Context, token string) error {
	_, err := q.db.Exec(ctx, updateSessionExpiry, token)
	return err
}
